receivers:
  otlp:
    protocols:
      grpc:
      http:
  docker_stats:
    endpoint: unix:///var/run/docker.sock
    collection_interval: 30s
    timeout: 10s
    api_version: "1.25"
    metrics:
      container.uptime:
        enabled: true
      container.restarts:
        enabled: true
      container.network.io.usage.rx_errors:
        enabled: true
      container.network.io.usage.tx_errors:
        enabled: true
      container.network.io.usage.rx_packets:
        enabled: true
      container.network.io.usage.tx_packets:
        enabled: true
  postgresql:
    endpoint: postgresql:5432
    transport: tcp
    username: "activesec"
    password: "activesec123"
    tls:
      insecure: true

exporters:
  otlp/jaeger: # Jaeger supports OTLP directly. The default port for OTLP/gRPC is 4317
    endpoint: jaeger-all-in-one:4317
    tls:
      insecure: true
  otlphttp:
    endpoint: "https://pdx-sls-agent-api.saas.appdynamics.com"
    headers: {"x-api-key": "6e7c44d9f5c6e1a2bffccddc9edef96af34fc02e3094eab89641138386bfc4d4"}
  prometheus:
    endpoint: '0.0.0.0:9091'
    namespace: test-space
    send_timestamps: true
    metric_expiration: 180m
    resource_to_telemetry_conversion:
      enabled: true
  splunk_hec:
    # Splunk HTTP Event Collector token.
    token: "d13540c7-6a9c-4ceb-a190-988135297b7a"
    # URL to a Splunk instance to send data to.
    endpoint: "https://prd-p-lbp5u.splunkcloud.com:8088/services/collector"
    # Optional Splunk source: https://docs.splunk.com/Splexicon:Source
    source: "otel"
    # Optional Splunk source type: https://docs.splunk.com/Splexicon:Sourcetype
    sourcetype: "otel"
    # Splunk index, optional name of the Splunk index targeted.
    index: "metrics"
    # Maximum HTTP connections to use simultaneously when sending data. Defaults to 100.
    max_idle_conns: 200
    # Whether to disable gzip compression over HTTP. Defaults to false.
    disable_compression: false
    # HTTP timeout when sending data. Defaults to 10s.
    timeout: 10s
    tls:
      # Whether to skip checking the certificate of the HEC endpoint when sending data over HTTPS. Defaults to false.
      insecure_skip_verify: true
      # Path to the CA cert to verify the server being connected to.
    # Application name is used to track telemetry information for Splunk App's using HEC by App name.
    splunk_app_name: "OpenTelemetry-Collector Splunk Exporter"
    # Application version is used to track telemetry information for Splunk App's using HEC by App version.
    splunk_app_version: "v0.0.1"
    heartbeat:
      interval: 30s
    telemetry:
      enabled: true
      override_metrics_names:
        otelcol_exporter_splunkhec_heartbeats_sent: app_heartbeats_success_total
        otelcol_exporter_splunkhec_heartbeats_failed: app_heartbeats_failed_total
      extra_attributes:
        dataset_name: SplunkCloudBeaverStack
        custom_key: custom_value

processors:
  resource:
    attributes:
    - key: appdynamics.controller.account
      action: upsert
      value: "alesialabssadecv-nfr"
    - key: appdynamics.controller.host
      action: upsert
      value: "alesialabssadecv-nfr.saas.appdynamics.com"
    - key: appdynamics.controller.port
      action: upsert
      value: 443
    - key: service.namespace
      action: upsert		
      value: Demo3
    - key: service.name
      action: upsert
      value: OT-Demo-docker
  batch:
    timeout: 30s
    send_batch_size: 90
  resourcedetection:
    detectors: [env, system]
    timeout: 2s
    system:
      hostname_sources: [os]

extensions:
  health_check:

service:
  extensions: [health_check]
  pipelines:
    metrics:
      receivers: [docker_stats,postgresql]
      processors: [resourcedetection,batch]
      exporters: [splunk_hec,prometheus]
#    traces:
#      receivers: [docker_stats]
#      processors: [resource,resourcedetection,batch]
#      exporters: [otlp/jaeger,otlphttp]
#    logs:
#      receivers: [docker_stats]
#      processors: [resource,resourcedetection,batch]
#      exporters: [otlp/jaeger,otlphttp]

